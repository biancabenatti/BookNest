# API REST de Livros

# Variáveis para fácil alteração:
@baseURL = http://localhost:3000/api
@id = 684837a68b49cc5a4a34e0c5
@categoria = ficcao 
@token = QjJkMjcxM2Q2YzVjMzY3YjM2NzYxYjU2YTRmNzU4ZTM0MjkwZTJhNDQzMjE4NzYzMzgxYTYwNjQ3NDc1NjE4MjQ3Nzc4MTQ1NzQzNjE1NDk5MDY1Mjk4MDQ1MDA4NzE2NzI0MTk1MzU1MjUzNA

###
# 1. Teste de Acesso a Rota Protegida (COM TOKEN - DEVE FUNCIONAR)
# Endpoint: /api/livros
# Método: GET
# Deve retornar: 200 OK e a lista de livros (pode ser vazia).
GET {{baseURL}}/livros
Content-Type: application/json
Authorization: Bearer {{token}}

###
# 2. Teste de Busca de Livro por ID (COM TOKEN - DEVE FUNCIONAR)
# Endpoint: /api/livros/:id
# Método: GET
GET {{baseURL}}/livros/{{id}}
Content-Type: application/json
Authorization: Bearer {{token}}

###
# 3. Teste de Busca de Livros por Categoria (COM TOKEN - DEVE FUNCIONAR)
# Endpoint: /api/livros?categoria=...
# Método: GET
# Deve retornar: 200 OK e a lista de livros da categoria especificada.
GET {{baseURL}}/livros?categoria={{categoria}}
Content-Type: application/json
Authorization: Bearer {{token}}

###
# 4. Teste de Criação de Livro (COM TOKEN - DEVE FUNCIONAR)
# Endpoint: /api/livros
# Método: POST
# Deve retornar: 201 Created.
POST {{baseURL}}/livros
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "titulo": "Meu Novo Livro Teste",
  "avaliacao": 2,
  "autor": "Autor da História",
  "data_leitura": "2025-06-10",
  "descricao": "Este é um livro de teste para verificar a funcionalidade da API.",
  "categoria": "ficcao"
}

###
# 5. Teste de Atualização de Livro (COM TOKEN - DEVE FUNCIONAR)
# Endpoint: /api/livros/:id
# Método: PUT
PUT {{baseURL}}/livros/{{id}}
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "titulo": "A Arte da Guerra (Edição Revisada)",
  "avaliacao": 2,
  "autor": "Sun Tzu",
  "data_leitura": "2025-05-01", 
  "descricao": "Uma nova descrição para o livro, agora com mais detalhes.",
  "categoria": "filosofia"
}

###
# 6. Teste de Deleção de Livro (COM TOKEN - DEVE FUNCIONAR)
# Endpoint: /api/livros/:id
# Método: DELETE
DELETE {{baseURL}}/livros/{{id}}
Content-Type: application/json
Authorization: Bearer {{token}}

###
# 7. Teste de Busca de Livros por Categoria Específica (COM TOKEN - DEVE FUNCIONAR)
# Endpoint: /api/livros?categoria=ficcao
# Método: GET
# Deve retornar: 200 OK e a lista de livros da categoria 'ficcao'.
GET {{baseURL}}/livros?categoria=ficcao
Content-Type: application/json
Authorization: Bearer {{token}}

###
# 8. Teste de Busca de Livros por Ordem de Avaliação (Maior para Menor) (COM TOKEN - DEVE FUNCIONAR)
# Endpoint: /api/livros?ordem=maior
# Método: GET
# Deve retornar: 200 OK e a lista de livros ordenada pela avaliação (maior primeiro).
GET {{baseURL}}/livros?ordem=maior
Content-Type: application/json
Authorization: Bearer {{token}}

###
# 9. Teste de Busca de Livros por Ordem de Avaliação (Menor para Maior) (COM TOKEN - DEVE FUNCIONAR)
# Endpoint: /api/livros?ordem=menor
# Método: GET
# Deve retornar: 200 OK e a lista de livros ordenada pela avaliação (menor primeiro).
GET {{baseURL}}/livros?ordem=menor
Content-Type: application/json
Authorization: Bearer {{token}}

###
# 10. Teste de Busca de Livros por Categoria E Ordem (COM TOKEN - DEVE FUNCIONAR)
# Endpoint: /api/livros?categoria=fantasia&ordem=maior
# Método: GET
# Deve retornar: 200 OK e a lista de livros da categoria 'ficcao' ordenada por avaliação (maior primeiro).
GET {{baseURL}}/livros?categoria=fantasia&ordem=maior
Content-Type: application/json
Authorization: Bearer {{token}}